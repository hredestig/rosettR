{"name":"rosettR","tagline":"A high-throughput affordable in vitro growth assay for Arabidopsis","body":"# Introduction to *rosettR*\r\n\r\nThis package implements a high-throughput and affordable growth\r\nphenotyping assay for plate grown Arabidopsis plants. Briefly, plants\r\nare grown in petri dishes on solid medium and photographed at regular\r\nintervals. Images are then analyzed using the functions implmented in\r\nthis package to calculate area and relative growth rate of the rosetts\r\nwhich then can be used to compare the differences between genotypes\r\nand the effect of applied treatments such as starvation, osmotic or\r\nheat stress.\r\n\r\nIn this vignette, the creation of a new experiment, analysis of images\r\nand generation of template statistical reports are described. The\r\nexamples are reproducible and with a working installation of `rosettR`\r\nyou can copy-paste code to your R terminal to try it out.\r\n\r\n## Installation\r\n\r\nThis package is not yet available on CRAN so the easiest way to\r\ninstall it is to use the [devtools](http://github.com/hadley/devtools)\r\npackage.\r\n\r\n```{r eval=FALSE}\r\nlibrary(devtools)\r\ninstall_github(\"hredestig/rosettR\", subdir=\"pkg\")\r\n```\r\n\r\nThe package is tested on Windows 7 and Linux.\r\n\r\n# Experiment design\r\n\r\nA new experiment can be started by first loading the package and\r\ncreating a meta-data object that details the specifics of the\r\nexperiment. As a toy-example, let's study genotypes named foo, bar,\r\nbaz and qux subjected to two treatments: control condition and osmotic\r\nstress. Each plate is in this design divided in four regions with 8\r\nboxes each (aka *wells*) of which all are occupied by a single seed of\r\nthe same genotype. In our test experiment, we have only four genotypes\r\nso all plates have the same layout. In addition to genotypes and\r\ntreatment, we define the time-points (days) at which pictures are\r\ntaken, the number of repetition blocks and short description of the\r\nexperiment to add to each report.\r\n\r\n* **genotypes** the names of the studied genotype\r\n* **treatments** the applied treatment conditions.\r\n* **time-points** the considered time-points (days)\r\n* **number of repetition blocks** the number of times the experiment\r\n  is repeated to obtain biological replication\r\n* **reference** the genotype with which all other genotypes should be\r\n  compared \r\n* **description** a optional short description of what the experiment\r\n  is meant for\r\n\r\n*NB:* Avoid using special character such as greek letters. If\r\nyou must have spaces within an element, make sure to quote it as\r\n`\"genotype with space\"`. \r\n\r\nWe start an experiment by first creating a meta-data object (a simple\r\nlist with key-value pairs)\r\n\r\n```{r setup}\r\nlibrary(rosettR)\r\nmeta <- metaTemplate(genotypes=c(\"foo\", \"bar\", \"baz\", \"qux\"),\r\n                     treatments=c(\"control\", \"osmotic_stress\"),\r\n                     timepoints=c(11, 14, 16, 18),\r\n                     nblocks=3,\r\n                     reference=\"foo\",\r\n                     description=\"a test experiment\")\r\n```\r\n\r\nNext we 'create' the experiment which generates the metadata-file, the\r\ndirectory structure in which to place the taken pictures and the\r\nmanifest file that defines the randomized block design.\r\n\r\n```{r create-experiment}\r\npathToExperiment <- \"rosettrTest\"\r\nnewExperiment(pathToExperiment, meta)\r\n```\r\n\r\nThe manifest file can be open in your favor spread-sheet editor or\r\njust inspected directly by\r\n\r\n```{r example-manifest}\r\nhead(readManifest(pathToExperiment))\r\n```\r\n\r\nTo obtain an overview of the created experiment, to support preparing\r\nthe plates, compile the template 'layout' report.\r\n\r\n```{r layout-report, results=\"hide\"}\r\nmakeReport(pathToExperiment, \"layout\", quiet=TRUE)\r\n```\r\n\r\nLet plants grow, take images (in jpg format) exactly in the order they\r\nare listed in the manifest and save them in the designated directories\r\nfor each monitored day. Make sure that your camera's internal watch is\r\ncorrectly set as the time the photo was taken will be used to match\r\neach image to the corresponding line in the manifest. You are further\r\nadviced to lavel the plates (in the margin of the lid, visible to the\r\ncamera but not covering any plants) so that you can be sure the order\r\nis correct. Further ensure that\r\n\r\n* each plate is exactly in the centre of the image\r\n* that it is straight, with the grid parallel to the edges of the\r\n  image\r\n* the background color and light is the same across all days\r\n* that the zoom factor is the same across all days\r\n\r\nThanks to to auto-correction steps in the analysis, it is possible to\r\nanalyze image also with slight deviations from these rules but it\r\nresult is likely to be better if they are kept.\r\n\r\n# Image analysis\r\n\r\nBefore detailing the process of analyzing a whole experiment, we give\r\na brief description of the analysis of a single image. This process is\r\ndefined in the function `analyzeImage` and consists of the\r\nfollowing main steps:\r\n\r\n* image files are renamed from e.g. IMGxxxx.jpg to plate001.jpg to\r\n  match the names in the manifest (order obtained from time the\r\n  picture was taken as recorded in the exif tag of the jpeg file)\r\n* re-size the image to the `hires` width - default to 1500 pixels\r\n  width (smaller gives faster analysis but too small will introduce\r\n  noise)\r\n* test for eccentricity of the plate in which the plate is detected\r\n  and its eccentricity is recorded and correcte for.\r\n* adjustment for plate location (using an optimization algorithm)\r\n* made binary by clustering\r\n* adjustment for plate rotation (using a mixture model algorithm)\r\n* extracting contiguous features\r\n* sorting features to different boxes in the grid by checking\r\n  their distances to box-centers and total occupancy of boxes.\r\n* generating a quality control picture.\r\n\r\nFor testing purposes, we first unzip some example images to our\r\nexample and set the scale directly\r\n\r\n```{r unzip-example}\r\nmeta <- readMeta(pathToExperiment)\r\nmeta$pixelsmm <- 7.54 # 7.54 pixels per millimeter\r\nwriteMeta(meta, pathToExperiment)\r\nunzip(system.file(\"examples/rosettrTest.zip\", package=\"rosettR\"),\r\n      exdir=\".\")\r\n```\r\n\r\nWhen all images have been taken you can generate an overview of them by\r\n\r\n```{r overview}\r\nmakeReport(pathToExperiment, \"overview\", quiet=TRUE)\r\n```\r\n\r\nIf all images look as expwcted, it is time to analyze them. First\r\nhowever, you should calibrate the scale of the images to get the right\r\npixels to millimeter mapping. Do this by\r\n\r\n```{r calibrate, eval=FALSE}\r\ncalibrateScale(pathToExperiment)\r\n```\r\n\r\nWhich will record the conversion in the meta-data file for future\r\nreference.\r\n\r\nNext, we analyze the images using `processPlateExperiment` function.\r\n\r\n```{r eval=FALSE} \r\nprocessPlateExperiment(pathToExperiment, checklocation=FALSE)\r\n```\r\n```{r echo=FALSE}\r\nunzip(system.file(\"examples/rosettrTestResults.zip\", package=\"rosettR\"),\r\n      exdir=\".\")\r\n```\r\n\r\nwe turn off the plate location detection to speedup this test analysis (and\r\nfor demonstration purposed later in this vignette)\r\n\r\n## Perform quality control\r\n\r\nOnce images have been analyzed, statistical analysis can be done by\r\ncompiling a suitable template report. This is done by running\r\n`makeReport` that creates a report for the experiment\r\nin the designated output directory (`[path to\r\n    experiment]/Output/reports/`). The first report to compile is\r\ntypically a quality control report.\r\n\r\n```{r qc-check, results=\"hide\"}\r\nmakeReport(pathToExperiment, \"quality-check\", quiet=TRUE)\r\n```\r\n\r\nThe final report can then be found in the `Output` folder of the\r\nexperiment which shows QC images for all plates as well as graphs to\r\nindicate the presence of outliers.\r\n\r\nIn the QC images, the grid is indicated by black boxes and features\r\nare shown with randomly chosen colors. Boxes in which features were\r\nfound that could not be sorted to a distinct box are indicated by a\r\nred border. In a successful scenario, all boxes are black and each box\r\ncontains a plant of color different from the plants in all neighboring\r\nboxes. However, when overlapping plants are identified, the\r\ncorresponding boxes are cutout and all the area estimate of the plant\r\nin that box becomes the sum of all features in the box. This process\r\nwill often yield poor area estimates and plates with many ambiguous\r\nboxes may be considered for removal using the `removeBoxes` function,\r\nor reprocessed with tuned image analysis (arguments for\r\n`analyzeImage`) parameters.\r\n\r\n## Re-processing failed images\r\n\r\nIf the analysis has gone wrong due to e.g the plate location not\r\ncorrectly identified, it is possible to reprocess the picture with\r\nimproved parameters to image threshold, angle correction, plate\r\ndisplacement etc.\r\n\r\nAs can be seen when studying the QC images of our example experiment,\r\none image failed since it was excessively out of the centre of the\r\nimage.\r\n\r\n```{r excentric}\r\npda <- readPhenodata(pathToExperiment)\r\nqcpic <- subset(pda, timepoint == 11 & plate == \"plate001.jpg\")$qc[1]\r\nlibrary(EBImage)\r\nqcPath <- file.path(pathToExperiment, qcpic)\r\nqcImage <- readImage(qcPath)\r\ndisplay(qcImage, method=\"raster\")\r\n```\r\n\r\nTo resolve this problem, we reprocess that single image but this time\r\nwith the location correction turned on.\r\n\r\n```{r fix, results=\"hide\"}\r\nmf <- readManifest(pathToExperiment)\r\nmf <- subset(mf, timepoint == 11 & plate  == \"plate001.jpg\")\r\n## reprocess the plate where using the plate location correction\r\npda <- reprocessPlateImages(pathToExperiment, mf, checklocation=TRUE)\r\n```\r\n\r\nInspect the result\r\n\r\n```{r inspect-fix}\r\npda <- readPhenodata(pathToExperiment)\r\nqcpic <- subset(pda, timepoint == 11 & plate == \"plate001.jpg\")$qc[1]\r\ndisplay(readImage(file.path(pathToExperiment, qcpic)), method=\"raster\")\r\n```\r\n\r\nSee the documenation for `analyzeImage` for other parameters that can\r\nbe adjusted during image analysis.\r\n\r\nWe ca then re-compile the quality control report\r\n\r\n```{r qc-again, results=\"hide\"}\r\nmakeReport(pathToExperiment, \"quality-check\", quiet=TRUE)\r\n```\r\n\r\n# Interpretation\r\n\r\nTo obtain the final results from the experiment, compile the report to\r\ncompare areas by plots and by ANOVA.\r\n\r\n```{r compare, results=\"hide\"}\r\nmakeReport(pathToExperiment, \"compare-areas\", quiet=TRUE)\r\n```\r\n\r\nYou can also simply run\r\n\r\n```{r manual-analysis, eval=FALSE}\r\nreadPhenodata(pathToExperiment)\r\n```\r\n\r\nto get a dataframe with the results with which you can perform your\r\nown tailored statistical analysis.\r\n\r\n# Additional topics\r\n\r\n## Failed plates\r\n\r\nIn the event of contamination, e.g. fungal growth on the plate you may\r\nwant to prematurely discard plates. In that case, it is important to\r\ntake place-holder images to get the order of images right. The\r\nrecommendation is to replace the bad plate with an empty one and keep\r\ntaking images of that empty plate. Such empty plates are detected\r\nduring image analysis and areas are indicated as missing values. The\r\nQC picture will be replace by a place holder indicated that the plate\r\nwas empty.\r\n\r\n## Parallel computing\r\n\r\nImage analysis can be done in parallel to speed up computation\r\nconsiderably. The `rosettR` package uses\r\n[plyr](https://cran.r-project.org/web/packages/plyr/index.html) which\r\nsupport using multiple CPUs on a single host via the\r\n[doParallel](https://cran.r-project.org/web/packages/doParallel/index.html)\r\npackage. Simple register a parallel backend by for using e.g. 4 CPUs\r\nby\r\n\r\n```{r eval=FALSE}\r\nlibrary(doParallel)\r\nregisterDoParallel(cores=4)\r\n```\r\n\r\nand then processing images adding the argument `.parallel=TRUE`. The\r\nmemory consumption is quite low so you can safely use as many CPUs as\r\nyou have minus 1 (to not make your computer unresponsive).\r\n\r\n# Session info\r\n\r\nHere is the output of sessionInfo() on the system on which this document was compiled:\r\n\r\n```{r echo=FALSE}\r\nsessionInfo()\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}